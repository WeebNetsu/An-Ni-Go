{ TO-DO list:
  Function/procedure to see which card is stronger and destroy the weaker one
  import database methods so you can load images
  database > arrays
}

unit frmGame_u;

{
  Component terms:
  imgFE - image Fighting Enemy (com fighter on the board)
  imgFP - image Fighting Player (player fighter on the board)
}

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, jpeg, StdCtrls, dmConnection_u, ComCtrls, math;

type
  TfrmGame = class(TForm)
    pnlBoard: TPanel;
    pnlEnimyCardHolder: TPanel;
    imgPDeck: TImage;
    imgEDeck: TImage;
    lblPlayerHP: TLabel;
    lblPP: TLabel;
    lblCP: TLabel;
    lblComHP: TLabel;
    imgE1: TImage;
    imgE2: TImage;
    imgE5: TImage;
    imgE4: TImage;
    imgE3: TImage;
    imgE6: TImage;
    pnlPlayerCardHolder: TPanel;
    imgP1: TImage;
    imgP2: TImage;
    imgP5: TImage;
    imgP4: TImage;
    imgP3: TImage;
    imgP6: TImage;
    imgFE1: TImage;
    imgFE2: TImage;
    imgFE3: TImage;
    imgFP3: TImage;
    imgFP2: TImage;
    imgFP1: TImage;
    redNames: TRichEdit;
    btnTest: TButton;
    btnHelp: TButton;
    btnBattlePhase: TButton;
    btnEndTurn: TButton;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormActivate(Sender: TObject);
    procedure btnTestClick(Sender: TObject);
    procedure imgP1Click(Sender: TObject);
    procedure imgP2Click(Sender: TObject);
    procedure imgP3Click(Sender: TObject);
    procedure imgP4Click(Sender: TObject);
    procedure imgP5Click(Sender: TObject);
    procedure imgP6Click(Sender: TObject);
    procedure imgPDeckClick(Sender: TObject);
    procedure btnEndTurnClick(Sender: TObject);
    procedure btnBattlePhaseClick(Sender: TObject);
  private
    { Private declarations }
    iDeckCard, iTurn, iMove, iGameTurn: integer;

    arrCards: array [1 .. 148] of String; // all cards
    arrCardSRC: array [1 .. 148] of String; // Card sources
    arrCardAtk: array [1 .. 148] of integer; // card attack power
    arrPlayerCards: array [1 .. 60] of String; // Player deck
    arrComCards: array [1 .. 60] of String; // computer deck

    procedure removeCard;
    procedure addCardsToArray;
    procedure draw;
    procedure turnNumber;
    procedure newGame;
    // procedure putCardOnBoard();
  public
    { Public declarations }
  end;

var
  frmGame: TfrmGame;

implementation

uses
  frmEnter_u;
{$R *.dfm}

procedure TfrmGame.addCardsToArray();
var
  I: integer;
begin
  { with dmCards do
    begin
    tblCards.Open;
    tblCards.First;

    while not(tblCards.Eof) do
    begin
    for I := 1 to Length(arrCards) do
    begin
    arrCards[I] := arrCardSRC[I] + ';' + IntToStr(arrCardAtk[I]);
    end;
    tblCards.Next;
    end;
    end; }

  with dmCards do
  begin
    tblCards.Open;
    tblCards.First;
    for I := 1 to 148 do
    begin
      tblCards.Edit;
      tblCards['used'] := False;
      tblCards.Next;
    end;

    // Adds cards to player deck
    I := 1;
    while I <= 60 do // deck can only hold 60 cards
    Begin
      // Gets random cards
      if tblCards.locate('cardID', RandomRange(9, 149), []) then
      begin
        // if the card is not already in use, then add it to the players hand
        if tblCards['used'] = False then
        begin
          // make it used
          tblCards.Edit;
          tblCards['used'] := True;
          tblCards.Post;
          arrPlayerCards[I] := tblCards['imageSRC'] + ';' + inttostr
            (tblCards['atk']);
          Inc(I);
        end;
      end;
    End; // end of while loop

    // Adds cards to COM deck
    I := 1;
    while I <= 60 do // deck can only hold 60 cards
    Begin
      // Gets random cards
      if tblCards.locate('cardID', RandomRange(9, 149), []) then
      begin
        // if the card is not already in use, then add it to the COM hand
        if tblCards['used'] = False then
        begin
          // make it used
          tblCards.Edit;
          tblCards['used'] := True;
          tblCards.Post;
          arrComCards[I] := tblCards['imageSRC'] + ';' + inttostr
            (tblCards['atk']);
          Inc(I);
        end;
      end;
    End; // end of while loop
  end;
end;

procedure TfrmGame.draw;
var
  iCard: integer;
begin
  if imgP1.Visible = False then
  begin
    imgP1.Picture.LoadFromFile(copy(arrPlayerCards[iDeckCard], 1, Pos(';',
          arrPlayerCards[iDeckCard]) - 1));
    Inc(iDeckCard);
    imgP1.Visible := True;
  end
  else if imgP2.Visible = False then
  begin
    imgP2.Picture.LoadFromFile(copy(arrPlayerCards[iDeckCard], 1, Pos(';',
          arrPlayerCards[iDeckCard]) - 1));
    Inc(iDeckCard);
    imgP2.Visible := True;
  end
  else if imgP3.Visible = False then
  begin
    imgP3.Picture.LoadFromFile(copy(arrPlayerCards[iDeckCard], 1, Pos(';',
          arrPlayerCards[iDeckCard]) - 1));
    Inc(iDeckCard);
    imgP3.Visible := True;
  end
  else if imgP4.Visible = False then
  begin
    imgP4.Picture.LoadFromFile(copy(arrPlayerCards[iDeckCard], 1, Pos(';',
          arrPlayerCards[iDeckCard]) - 1));
    Inc(iDeckCard);
    imgP4.Visible := True;
  end
  else if imgP5.Visible = False then
  begin
    imgP5.Picture.LoadFromFile(copy(arrPlayerCards[iDeckCard], 1, Pos(';',
          arrPlayerCards[iDeckCard]) - 1));
    Inc(iDeckCard);
    imgP5.Visible := True;
  end
  else if imgP6.Visible = False then
  begin
    imgP6.Picture.LoadFromFile(copy(arrPlayerCards[iDeckCard], 1, Pos(';',
          arrPlayerCards[iDeckCard]) - 1));
    Inc(iDeckCard);
    imgP6.Visible := True;
  end
  else
  begin
    ShowMessage('Please discard 1 card from your hand.');
    removeCard;
  end;
  // removeCard(sCard);
end;

procedure TfrmGame.btnBattlePhaseClick(Sender: TObject);
begin
  if iGameTurn = 1 then
  begin
    ShowMessage('You cannot play first');
  end;
end;

procedure TfrmGame.btnEndTurnClick(Sender: TObject);
begin
  if iTurn = 1 then
  begin
    Inc(iGameTurn); // if iGameturn mod 2 = 0 : COM turn
    btnBattlePhase.Enabled := True;
  end
  else
  begin
    ShowMessage('You have to draw first');
  end;
end;

procedure TfrmGame.btnTestClick(Sender: TObject);
var
  iCount, I: integer;
begin
  with dmCards do
  begin
    tblCards.Open;
    // tblCards.Active := true;
    tblCards.First;
    iCount := 1;

    while (not tblCards.Eof) do
    begin
      arrCardSRC[iCount] := tblCards['imageSRC'];
      Inc(iCount);
      tblCards.Next;
    end;
  end;

  for I := 1 to Length(arrCardSRC) do
  begin
    redNames.Lines.Add(arrCardSRC[I]);
  end;

  // imgPDeck.Picture.LoadFromFile(arrCardSRC[2]);
end;

procedure TfrmGame.FormActivate(Sender: TObject);
var
  I, iPos: integer;
begin
  iDeckCard := 1;
  iGameTurn := 1;

  lblPlayerHP.Font.Color := clLime;
  lblPP.Font.Color := clLime; // Player Points (PP)
  lblComHP.Font.Color := clLime;
  lblCP.Font.Color := clLime; // computer points (HP)

  addCardsToArray;

  while iDeckCard <= 3 do
  begin
    if iDeckCard = 1 then
    begin
      imgP1.Picture.LoadFromFile(copy(arrPlayerCards[iDeckCard], 1, Pos(';',
            arrPlayerCards[iDeckCard]) - 1));
    end
    else if iDeckCard = 2 then
    begin
      imgP2.Picture.LoadFromFile(copy(arrPlayerCards[iDeckCard], 1, Pos(';',
            arrPlayerCards[iDeckCard]) - 1));
    end
    else if iDeckCard = 3 then
    begin
      imgP3.Picture.LoadFromFile(copy(arrPlayerCards[iDeckCard], 1, Pos(';',
            arrPlayerCards[iDeckCard]) - 1));
    end;
    Inc(iDeckCard);
  end;

  iTurn := 0;
  btnBattlePhase.Enabled := False;
end;

procedure TfrmGame.FormClose(Sender: TObject; var Action: TCloseAction);
var
  iExit: integer;
begin
  { iExit := MessageDlg('Are you sure you want to close the gaming screen?',
    mtWarning, [mbYes, mbNo], 0);

    if iExit = 0 then
    begin
    frmEnter.Show;
    Exit;
    end
    else
    begin
    frmGame.Show;
    end; }
  frmEnter.Show;
end;

procedure TfrmGame.imgP1Click(Sender: TObject);
begin
  // Make sure that there is space open for adding another card
  if iGameTurn mod 2 <> 0 then
  begin
    if iTurn = 1 then
    begin
      if iMove = 0 then
      begin
        if imgFP1.Visible = False then
        begin
          imgFP1.Picture := imgP1.Picture;
          imgFP1.Visible := True;
          imgP1.Visible := False;
          iMove := 1;
        end
        else if imgFP2.Visible = False then
        begin
          imgFP2.Picture := imgP1.Picture;
          imgFP2.Visible := True;
          imgP1.Visible := False;
          iMove := 1;
        end
        else if imgFP3.Visible = False then
        begin
          imgFP3.Picture := imgP1.Picture;
          imgFP3.Visible := True;
          imgP1.Visible := False;
          iMove := 1;
        end
        else
        begin
          ShowMessage('No open spaces are avalible');
        end;
      end
      else
      begin
        ShowMessage('You can only play 1 card per turn');
      end;
    end
    else
    begin
      ShowMessage('You have to draw first');
    end;
  end
  else
  begin
    ShowMessage('You can only draw on your turn');
  end;
end;

procedure TfrmGame.imgP2Click(Sender: TObject);
begin
  if iGameTurn mod 2 <> 0 then
  begin
    if iTurn = 1 then
    begin
      if iMove = 0 then
      begin
        if imgFP1.Visible = False then
        begin
          imgFP1.Picture := imgP2.Picture;
          imgFP1.Visible := True;
          imgP2.Visible := False;
          iMove := 1;
        end
        else if imgFP2.Visible = False then
        begin
          imgFP2.Picture := imgP2.Picture;
          imgFP2.Visible := True;
          imgP2.Visible := False;
          iMove := 1;
        end
        else if imgFP3.Visible = False then
        begin
          imgFP3.Picture := imgP2.Picture;
          imgFP3.Visible := True;
          imgP2.Visible := False;
          iMove := 1;
        end
        else
        begin
          ShowMessage('No open spaces are avalible');
        end;
      end
      else
      begin
        ShowMessage('You can only play 1 card per turn');
      end;
    end
    else
    begin
      ShowMessage('You have to draw first');
    end;
  end
  else
  begin
    ShowMessage('You can only draw on your turn');
  end;
end;

procedure TfrmGame.imgP3Click(Sender: TObject);
begin
  if iGameTurn mod 2 <> 0 then
  begin
    if iTurn = 1 then
    begin
      if iMove = 0 then
      begin
        if imgFP1.Visible = False then
        begin
          imgFP1.Picture := imgP3.Picture;
          imgFP1.Visible := True;
          imgP3.Visible := False;
          iMove := 1;
        end
        else if imgFP2.Visible = False then
        begin
          imgFP2.Picture := imgP3.Picture;
          imgFP2.Visible := True;
          imgP3.Visible := False;
          iMove := 1;
        end
        else if imgFP3.Visible = False then
        begin
          imgFP3.Picture := imgP3.Picture;
          imgFP3.Visible := True;
          imgP3.Visible := False;
          iMove := 1;
        end
        else
        begin
          ShowMessage('No open spaces are avalible');
        end;
      end
      else
      begin
        ShowMessage('You can only play 1 card per turn');
      end;
    end
    else
    begin
      ShowMessage('You have to draw first');
    end;
  end
  else
  begin
    ShowMessage('You can only draw on your turn');
  end;
end;

procedure TfrmGame.imgP4Click(Sender: TObject);
begin
  if iGameTurn mod 2 <> 0 then
  begin
    if iTurn = 1 then
    begin
      if iMove = 0 then
      begin
        if imgFP1.Visible = False then
        begin
          imgFP1.Picture := imgP4.Picture;
          imgFP1.Visible := True;
          imgP4.Visible := False;
          iMove := 1;
        end
        else if imgFP2.Visible = False then
        begin
          imgFP2.Picture := imgP4.Picture;
          imgFP2.Visible := True;
          imgP4.Visible := False;
          iMove := 1;
        end
        else if imgFP3.Visible = False then
        begin
          imgFP3.Picture := imgP4.Picture;
          imgFP3.Visible := True;
          imgP4.Visible := False;
          iMove := 1;
        end;
      end
      else
      begin
        ShowMessage('No open spaces are avalible');
      end;
    end
    else
    begin
      ShowMessage('You have to draw first');
    end;
  end
  else
  begin
    ShowMessage('You can only draw on your turn');
  end;
end;

procedure TfrmGame.imgP5Click(Sender: TObject);
begin
  if iGameTurn mod 2 <> 0 then
  begin
    if iTurn = 1 then
    begin
      if iMove = 0 then
      begin
        if imgFP1.Visible = False then
        begin
          imgFP1.Picture := imgP5.Picture;
          imgFP1.Visible := True;
          imgP5.Visible := False;
          iMove := 1;
        end
        else if imgFP2.Visible = False then
        begin
          imgFP2.Picture := imgP5.Picture;
          imgFP2.Visible := True;
          imgP5.Visible := False;
          iMove := 1;
        end
        else if imgFP3.Visible = False then
        begin
          imgFP3.Picture := imgP5.Picture;
          imgFP3.Visible := True;
          imgP5.Visible := False;
          iMove := 1;
        end
        else
        begin
          ShowMessage('No open spaces are avalible');
        end;
      end
      else
      begin
        ShowMessage('You can only play 1 card per turn');
      end;
    end
    else
    begin
      ShowMessage('You have to draw first');
    end;
  end
  else
  begin
    ShowMessage('You can only draw on your turn');
  end;
end;

procedure TfrmGame.imgP6Click(Sender: TObject);
begin
  if iGameTurn mod 2 <> 0 then
  begin
    if iTurn = 1 then
    begin
      if iMove = 0 then
      begin
        if imgFP1.Visible = False then
        begin
          imgFP1.Picture := imgP6.Picture;
          imgFP1.Visible := True;
          imgP6.Visible := False;
          iMove := 1;
        end
        else if imgFP2.Visible = False then
        begin
          imgFP2.Picture := imgP6.Picture;
          imgFP2.Visible := True;
          imgP6.Visible := False;
          iMove := 1;
        end
        else if imgFP3.Visible = False then
        begin
          imgFP3.Picture := imgP6.Picture;
          imgFP3.Visible := True;
          imgP6.Visible := False;
          iMove := 1;
        end
        else
        begin
          ShowMessage('No open spaces are avalible');
        end;
      end
      else
      begin
        ShowMessage('You can only play 1 card per turn');
      end;
    end
    else
    begin
      ShowMessage('You have to draw first');
    end;
  end
  else
  begin
    ShowMessage('You can only draw on your turn');
  end;
end;

procedure TfrmGame.imgPDeckClick(Sender: TObject);
begin
  if iTurn = 0 then
  begin
    draw;
    Inc(iTurn);
  end
  else
  begin
    ShowMessage('You can only draw once per turn');
  end;
end;

procedure TfrmGame.newGame;
begin
  imgP1.Visible := True;
  imgP2.Visible := True;
  imgP3.Visible := True;
  imgP4.Visible := False;
  imgP5.Visible := False;
  imgP6.Visible := False;
end;

procedure TfrmGame.removeCard;
var
  iCard: integer;
begin
  iCard := StrToInt(InputBox('Remove Card',
      'Which card do you want to dispose of?', '1'));

  if iCard = 1 then
  begin
    imgP1.Visible := False;
    draw;
  end
  else if iCard = 2 then
  begin
    imgP2.Visible := False;
    draw;
  end
  else if iCard = 3 then
  begin
    imgP3.Visible := False;
    draw;
  end
  else if iCard = 4 then
  begin
    imgP4.Visible := False;
    draw;
  end
  else if iCard = 5 then
  begin
    imgP5.Visible := False;
    draw;
  end
  else if iCard = 6 then
  begin
    imgP6.Visible := False;
    draw;
  end
  else
  begin
    ShowMessage('Only enter numbers from 1-6');
    removeCard;
  end;
end;

procedure TfrmGame.turnNumber;
begin
  Inc(iTurn);
end;

end.

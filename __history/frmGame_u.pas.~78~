{ TO-DO list:
  Function/procedure to see which card is stronger and destroy the weaker one
  import database methods so you can load images
  database > arrays
}

unit frmGame_u;

{
  Component terms:
  imgFE - image Fighting Enemy (com fighter on the board)
  imgFP - image Fighting Player (player fighter on the board)
}

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, jpeg, StdCtrls, dmConnection_u, ComCtrls, math;

type
  TfrmGame = class(TForm)
    pnlBoard: TPanel;
    pnlEnimyCardHolder: TPanel;
    imgPDeck: TImage;
    imgEDeck: TImage;
    lblPlayerHP: TLabel;
    lblPP: TLabel;
    lblCP: TLabel;
    lblComHP: TLabel;
    imgE1: TImage;
    imgE2: TImage;
    imgE5: TImage;
    imgE4: TImage;
    imgE3: TImage;
    imgE6: TImage;
    pnlPlayerCardHolder: TPanel;
    imgP1: TImage;
    imgP2: TImage;
    imgP5: TImage;
    imgP4: TImage;
    imgP3: TImage;
    imgP6: TImage;
    imgFE1: TImage;
    imgFE2: TImage;
    imgFE3: TImage;
    imgFP3: TImage;
    imgFP2: TImage;
    imgFP1: TImage;
    redNames: TRichEdit;
    btnTest: TButton;
    btnHelp: TButton;
    btnSkip: TButton;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormActivate(Sender: TObject);
    procedure btnTestClick(Sender: TObject);
    procedure imgP1Click(Sender: TObject);
    procedure imgP2Click(Sender: TObject);
    procedure imgP3Click(Sender: TObject);
    procedure imgP4Click(Sender: TObject);
    procedure imgP5Click(Sender: TObject);
    procedure imgP6Click(Sender: TObject);
    procedure imgPDeckClick(Sender: TObject);
  private
    { Private declarations }
    iDeckCard: integer;

    arrCards: array [1 .. 148] of String; // all cards
    arrCardSRC: array [1 .. 148] of String; // Card sources
    arrCardAtk: array [1 .. 148] of integer; // card attack power
    arrPlayerCards: array [1 .. 60] of String; // Player deck
    arrComCards: array [1 .. 60] of String; // computer deck

    procedure addCardsToArray();
    procedure start();
    // procedure putCardOnBoard();
  public
    { Public declarations }
  end;

var
  frmGame: TfrmGame;

implementation

uses
  frmEnter_u;
{$R *.dfm}

procedure TfrmGame.addCardsToArray();
var
  I: integer;
begin
  with dmCards do
  begin
    tblCards.Open;
    tblCards.First;

    while not(tblCards.Eof) do
    begin
      for I := 1 to Length(arrCards) do
      begin
        arrCards[I] := arrCardSRC[I] + ';' + IntToStr(arrCardAtk[I]);
      end;
      tblCards.Next;
    end;
  end;
end;

procedure TfrmGame.btnTestClick(Sender: TObject);
var
  iCount, I: integer;
begin
  with dmCards do
  begin
    tblCards.Open;
    // tblCards.Active := true;
    tblCards.First;
    iCount := 1;

    while (not tblCards.Eof) do
    begin
      arrCardSRC[iCount] := tblCards['imageSRC'];
      Inc(iCount);
      tblCards.Next;
    end;
  end;

  for I := 1 to Length(arrCardSRC) do
  begin
    redNames.Lines.Add(arrCardSRC[I]);
  end;

  // imgPDeck.Picture.LoadFromFile(arrCardSRC[2]);
end;

procedure TfrmGame.FormActivate(Sender: TObject);
var
  I: integer;
begin
  lblPlayerHP.Font.Color := clLime;
  lblPP.Font.Color := clLime; // Player Points (PP)
  lblComHP.Font.Color := clLime;
  lblCP.Font.Color := clLime; // computer points (HP)

  with dmCards do
  begin
    tblCards.Open;
    tblCards.First;

    // Makes all cards 'used' field false
    for I := 1 to 148 do
    begin
      tblCards.Edit;
      tblCards['used'] := False;
      tblCards.Next;
    end;

    I := 1;
    while I < 3 do
    Begin
      if tblCards.locate('cardID', RandomRange(1, 149), []) then
      begin
        if tblCards['used'] = False then
        begin
          tblCards.Edit;
          tblCards['used'] := True;
          tblCards.Post;
          arrCardSRC[I] := tblCards['imageSRC'];
          arrCardAtk[I] := tblCards['atk'];
          Inc(I);
        end;
      end;
    End;
  end;

  addCardsToArray();
  start();
  // putCardOnBoard();
  // ShowMessage(arrCards[2]);
  // imgPDeck.Picture.LoadFromFile(DataModule1.tblCards['imageSRC'].);
end;

procedure TfrmGame.FormClose(Sender: TObject; var Action: TCloseAction);
var
  iExit: integer;
begin
  { iExit := MessageDlg('Are you sure you want to close the gaming screen?',
    mtWarning, [mbYes, mbNo], 0);

    if iExit = 0 then
    begin
    frmEnter.Show;
    Exit;
    end
    else
    begin
    frmGame.Show;
    end; }
  frmEnter.Show;
end;

procedure TfrmGame.imgP1Click(Sender: TObject);
begin
  // Make sure that there is space open for adding another card
  if imgFP1.Visible = False then
  begin
    imgFP1.Picture := imgP1.Picture;
    imgFP1.Visible := True;
    imgP1.Visible := False;
  end
  else if imgFP2.Visible = False then
  begin
    imgFP2.Picture := imgP1.Picture;
    imgFP2.Visible := True;
    imgP1.Visible := False;
  end
  else if imgFP3.Visible = False then
  begin
    imgFP3.Picture := imgP1.Picture;
    imgFP3.Visible := True;
    imgP1.Visible := False;
  end
  else
  begin
    showMessage('No open spaces are avalible');
  end;
end;

procedure TfrmGame.imgP2Click(Sender: TObject);
begin
  if imgFP1.Visible = False then
  begin
    imgFP1.Picture := imgP2.Picture;
    imgFP1.Visible := True;
    imgP2.Visible := False;
  end
  else if imgFP2.Visible = False then
  begin
    imgFP2.Picture := imgP2.Picture;
    imgFP2.Visible := True;
    imgP2.Visible := False;
  end
  else if imgFP3.Visible = False then
  begin
    imgFP3.Picture := imgP2.Picture;
    imgFP3.Visible := True;
    imgP2.Visible := False;
  end
  else
  begin
    showMessage('No open spaces are avalible');
  end;
end;

procedure TfrmGame.imgP3Click(Sender: TObject);
begin
  if imgFP1.Visible = False then
  begin
    imgFP1.Picture := imgP3.Picture;
    imgFP1.Visible := True;
    imgP3.Visible := False;
  end
  else if imgFP2.Visible = False then
  begin
    imgFP2.Picture := imgP3.Picture;
    imgFP2.Visible := True;
    imgP3.Visible := False;
  end
  else if imgFP3.Visible = False then
  begin
    imgFP3.Picture := imgP3.Picture;
    imgFP3.Visible := True;
    imgP3.Visible := False;
  end
  else
  begin
    showMessage('No open spaces are avalible');
  end;
end;

procedure TfrmGame.imgP4Click(Sender: TObject);
begin
  if imgFP1.Visible = False then
  begin
    imgFP1.Picture := imgP4.Picture;
    imgFP1.Visible := True;
    imgP4.Visible := False;
  end
  else if imgFP2.Visible = False then
  begin
    imgFP2.Picture := imgP4.Picture;
    imgFP2.Visible := True;
    imgP4.Visible := False;
  end
  else if imgFP3.Visible = False then
  begin
    imgFP3.Picture := imgP4.Picture;
    imgFP3.Visible := True;
    imgP4.Visible := False;
  end
  else
  begin
    showMessage('No open spaces are avalible');
  end;
end;

procedure TfrmGame.imgP5Click(Sender: TObject);
begin
  if imgFP1.Visible = False then
  begin
    imgFP1.Picture := imgP5.Picture;
    imgFP1.Visible := True;
    imgP5.Visible := False;
  end
  else if imgFP2.Visible = False then
  begin
    imgFP2.Picture := imgP5.Picture;
    imgFP2.Visible := True;
    imgP5.Visible := False;
  end
  else if imgFP3.Visible = False then
  begin
    imgFP3.Picture := imgP5.Picture;
    imgFP3.Visible := True;
    imgP5.Visible := False;
  end
  else
  begin
    showMessage('No open spaces are avalible');
  end;
end;

procedure TfrmGame.imgP6Click(Sender: TObject);
begin
  if imgFP1.Visible = False then
  begin
    imgFP1.Picture := imgP6.Picture;
    imgFP1.Visible := True;
    imgP6.Visible := False;
  end
  else if imgFP2.Visible = False then
  begin
    imgFP2.Picture := imgP6.Picture;
    imgFP2.Visible := True;
    imgP6.Visible := False;
  end
  else if imgFP3.Visible = False then
  begin
    imgFP3.Picture := imgP6.Picture;
    imgFP3.Visible := True;
    imgP6.Visible := False;
  end
  else
  begin
    showMessage('No open spaces are avalible');
  end;
end;

procedure TfrmGame.imgPDeckClick(Sender: TObject);
var
  iCard: integer;
begin

  if imgP1.Visible = False then
  begin
    imgP1.Picture.LoadFromFile(Copy(arrPlayerCards[iDeckCard], 1, Pos(';',
          arrPlayerCards[1]) - 1));
    Inc(iDeckCard);
    imgP1.Visible := True;
  end;
end;

procedure TfrmGame.start;
var
  I, j, iCard, iCardATK, iPos1, iPos2, iPos3: integer;
  sCardSRC: string;
begin
  for I := 1 to Length(arrPlayerCards) do
  begin
    Randomize;
    iCard := RandomRange(1, 149);

    arrPlayerCards[I] := arrCards[iCard];
    arrComCards[I] := arrCards[iCard];
  end;

  // Makes sure that cards are special
  for I := 1 to Length(arrPlayerCards) do
  begin
    for j := I + 1 to Length(arrPlayerCards) do
    begin
      if arrPlayerCards[I] = arrPlayerCards[j] then
      begin
        arrPlayerCards[I] := arrCards[RandomRange(1, 149)];
      end;
    end;
  end;

  iPos1 := Pos(';', arrPlayerCards[1]);
  iPos2 := Pos(';', arrPlayerCards[2]);
  iPos3 := Pos(';', arrPlayerCards[3]);

  imgP1.Picture.LoadFromFile(Copy(arrPlayerCards[1], 1, Pos(';',
        arrPlayerCards[1]) - 1));
  imgP2.Picture.LoadFromFile(Copy(arrPlayerCards[2], 1, Pos(';',
        arrPlayerCards[2]) - 1));
  imgP3.Picture.LoadFromFile(Copy(arrPlayerCards[3], 1, Pos(';',
        arrPlayerCards[3]) - 1));
  // imgPDeck.Picture.LoadFromFile(DataModule1.tblCards['imageSRC'].);

  iDeckCard := 4;
end;

end.
